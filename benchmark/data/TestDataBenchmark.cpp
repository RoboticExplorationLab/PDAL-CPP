#include "TestDataBenchmark.h"

using namespace pdal;

PDAL_int_t Hn = 360;
PDAL_int_t Hp[] = {
    0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,
    23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,
    46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,
    69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,
    92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
    115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
    138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
    184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
    207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
    230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
    253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
    276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
    299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
    345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360};
PDAL_int_t Hi[] = {
    0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,
    23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,
    46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,
    69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,
    92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
    115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
    138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
    184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
    207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
    230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
    253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
    276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
    299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
    345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359};

// clang-format off
PDAL_float_t Hx[] = {1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,
    5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,
    5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,
    1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,
    1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,
    1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,
    1,321.474280834241,321.474280834241,141.9574394121,141.9574394121};
// clang-format on

PDAL_int_t Grows = 240;
PDAL_int_t Gcols = 360;
PDAL_int_t Gp[] = {
    0,   2,   4,   6,   8,   11,  14,  16,  18,  20,  22,  25,  28,  30,  32,  34,  36,  39,  42,  44,  46,  48,  50,
    53,  56,  58,  60,  62,  64,  67,  70,  72,  74,  76,  78,  81,  84,  86,  88,  90,  92,  95,  98,  100, 102, 104,
    106, 109, 112, 114, 116, 118, 120, 123, 126, 128, 130, 132, 134, 137, 140, 142, 144, 146, 148, 151, 154, 156, 158,
    160, 162, 165, 168, 170, 172, 174, 176, 179, 182, 184, 186, 188, 190, 193, 196, 198, 200, 202, 204, 207, 210, 212,
    214, 216, 218, 221, 224, 226, 228, 230, 232, 235, 238, 240, 242, 244, 246, 249, 252, 254, 256, 258, 260, 263, 266,
    268, 270, 272, 274, 277, 280, 282, 284, 286, 288, 291, 294, 296, 298, 300, 302, 305, 308, 310, 312, 314, 316, 319,
    322, 324, 326, 328, 330, 333, 336, 338, 340, 342, 344, 347, 350, 352, 354, 356, 358, 361, 364, 366, 368, 370, 372,
    375, 378, 380, 382, 384, 386, 389, 392, 394, 396, 398, 400, 403, 406, 408, 410, 412, 414, 417, 420, 422, 424, 426,
    428, 431, 434, 436, 438, 440, 442, 445, 448, 450, 452, 454, 456, 459, 462, 464, 466, 468, 470, 473, 476, 478, 480,
    482, 484, 487, 490, 492, 494, 496, 498, 501, 504, 506, 508, 510, 512, 515, 518, 520, 522, 524, 526, 529, 532, 534,
    536, 538, 540, 543, 546, 548, 550, 552, 554, 557, 560, 562, 564, 566, 568, 571, 574, 576, 578, 580, 582, 585, 588,
    590, 592, 594, 596, 599, 602, 604, 606, 608, 610, 613, 616, 618, 620, 622, 624, 627, 630, 632, 634, 636, 638, 641,
    644, 646, 648, 650, 652, 655, 658, 660, 662, 664, 666, 669, 672, 674, 676, 678, 680, 683, 686, 688, 690, 692, 694,
    697, 700, 702, 704, 706, 708, 711, 714, 716, 718, 720, 722, 725, 728, 730, 732, 734, 736, 739, 742, 744, 746, 748,
    750, 753, 756, 758, 760, 762, 764, 767, 770, 772, 774, 776, 778, 781, 784, 786, 788, 790, 792, 795, 798, 800, 802,
    804, 806, 809, 812, 814, 816, 818, 820, 823, 826, 828, 830, 831, 832, 833, 834};
PDAL_int_t Gi[] = {
    0,   2,   1,   3,   0,   4,   1,   5,   2,   4,   6,   3,   5,   7,   4,   6,   5,   7,   4,   8,   5,   9,   6,
    8,   10,  7,   9,   11,  8,   10,  9,   11,  8,   12,  9,   13,  10,  12,  14,  11,  13,  15,  12,  14,  13,  15,
    12,  16,  13,  17,  14,  16,  18,  15,  17,  19,  16,  18,  17,  19,  16,  20,  17,  21,  18,  20,  22,  19,  21,
    23,  20,  22,  21,  23,  20,  24,  21,  25,  22,  24,  26,  23,  25,  27,  24,  26,  25,  27,  24,  28,  25,  29,
    26,  28,  30,  27,  29,  31,  28,  30,  29,  31,  28,  32,  29,  33,  30,  32,  34,  31,  33,  35,  32,  34,  33,
    35,  32,  36,  33,  37,  34,  36,  38,  35,  37,  39,  36,  38,  37,  39,  36,  40,  37,  41,  38,  40,  42,  39,
    41,  43,  40,  42,  41,  43,  40,  44,  41,  45,  42,  44,  46,  43,  45,  47,  44,  46,  45,  47,  44,  48,  45,
    49,  46,  48,  50,  47,  49,  51,  48,  50,  49,  51,  48,  52,  49,  53,  50,  52,  54,  51,  53,  55,  52,  54,
    53,  55,  52,  56,  53,  57,  54,  56,  58,  55,  57,  59,  56,  58,  57,  59,  56,  60,  57,  61,  58,  60,  62,
    59,  61,  63,  60,  62,  61,  63,  60,  64,  61,  65,  62,  64,  66,  63,  65,  67,  64,  66,  65,  67,  64,  68,
    65,  69,  66,  68,  70,  67,  69,  71,  68,  70,  69,  71,  68,  72,  69,  73,  70,  72,  74,  71,  73,  75,  72,
    74,  73,  75,  72,  76,  73,  77,  74,  76,  78,  75,  77,  79,  76,  78,  77,  79,  76,  80,  77,  81,  78,  80,
    82,  79,  81,  83,  80,  82,  81,  83,  80,  84,  81,  85,  82,  84,  86,  83,  85,  87,  84,  86,  85,  87,  84,
    88,  85,  89,  86,  88,  90,  87,  89,  91,  88,  90,  89,  91,  88,  92,  89,  93,  90,  92,  94,  91,  93,  95,
    92,  94,  93,  95,  92,  96,  93,  97,  94,  96,  98,  95,  97,  99,  96,  98,  97,  99,  96,  100, 97,  101, 98,
    100, 102, 99,  101, 103, 100, 102, 101, 103, 100, 104, 101, 105, 102, 104, 106, 103, 105, 107, 104, 106, 105, 107,
    104, 108, 105, 109, 106, 108, 110, 107, 109, 111, 108, 110, 109, 111, 108, 112, 109, 113, 110, 112, 114, 111, 113,
    115, 112, 114, 113, 115, 112, 116, 113, 117, 114, 116, 118, 115, 117, 119, 116, 118, 117, 119, 116, 120, 117, 121,
    118, 120, 122, 119, 121, 123, 120, 122, 121, 123, 120, 124, 121, 125, 122, 124, 126, 123, 125, 127, 124, 126, 125,
    127, 124, 128, 125, 129, 126, 128, 130, 127, 129, 131, 128, 130, 129, 131, 128, 132, 129, 133, 130, 132, 134, 131,
    133, 135, 132, 134, 133, 135, 132, 136, 133, 137, 134, 136, 138, 135, 137, 139, 136, 138, 137, 139, 136, 140, 137,
    141, 138, 140, 142, 139, 141, 143, 140, 142, 141, 143, 140, 144, 141, 145, 142, 144, 146, 143, 145, 147, 144, 146,
    145, 147, 144, 148, 145, 149, 146, 148, 150, 147, 149, 151, 148, 150, 149, 151, 148, 152, 149, 153, 150, 152, 154,
    151, 153, 155, 152, 154, 153, 155, 152, 156, 153, 157, 154, 156, 158, 155, 157, 159, 156, 158, 157, 159, 156, 160,
    157, 161, 158, 160, 162, 159, 161, 163, 160, 162, 161, 163, 160, 164, 161, 165, 162, 164, 166, 163, 165, 167, 164,
    166, 165, 167, 164, 168, 165, 169, 166, 168, 170, 167, 169, 171, 168, 170, 169, 171, 168, 172, 169, 173, 170, 172,
    174, 171, 173, 175, 172, 174, 173, 175, 172, 176, 173, 177, 174, 176, 178, 175, 177, 179, 176, 178, 177, 179, 176,
    180, 177, 181, 178, 180, 182, 179, 181, 183, 180, 182, 181, 183, 180, 184, 181, 185, 182, 184, 186, 183, 185, 187,
    184, 186, 185, 187, 184, 188, 185, 189, 186, 188, 190, 187, 189, 191, 188, 190, 189, 191, 188, 192, 189, 193, 190,
    192, 194, 191, 193, 195, 192, 194, 193, 195, 192, 196, 193, 197, 194, 196, 198, 195, 197, 199, 196, 198, 197, 199,
    196, 200, 197, 201, 198, 200, 202, 199, 201, 203, 200, 202, 201, 203, 200, 204, 201, 205, 202, 204, 206, 203, 205,
    207, 204, 206, 205, 207, 204, 208, 205, 209, 206, 208, 210, 207, 209, 211, 208, 210, 209, 211, 208, 212, 209, 213,
    210, 212, 214, 211, 213, 215, 212, 214, 213, 215, 212, 216, 213, 217, 214, 216, 218, 215, 217, 219, 216, 218, 217,
    219, 216, 220, 217, 221, 218, 220, 222, 219, 221, 223, 220, 222, 221, 223, 220, 224, 221, 225, 222, 224, 226, 223,
    225, 227, 224, 226, 225, 227, 224, 228, 225, 229, 226, 228, 230, 227, 229, 231, 228, 230, 229, 231, 228, 232, 229,
    233, 230, 232, 234, 231, 233, 235, 232, 234, 233, 235, 232, 236, 233, 237, 234, 236, 238, 235, 237, 239, 236, 238,
    237, 239, 236, 237, 238, 239};

PDAL_float_t Gx[] = {-0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, -1, 1, -1, 1, -0.05, -1, 1, -0.05, -1,
                     -0.00125, -0.05, -0.00125, -0.05, 1, 1,  1, 1};

PDAL_int_t Crows = 60;
PDAL_int_t Ccols = 360;
PDAL_int_t Cp[] = {
    0,   0,   0,   1,   2,   2,   2,   2,   2,   3,   4,   4,   4,   4,   4,   5,   6,   6,   6,   6,   6,   7,   8,
    8,   8,   8,   8,   9,   10,  10,  10,  10,  10,  11,  12,  12,  12,  12,  12,  13,  14,  14,  14,  14,  14,  15,
    16,  16,  16,  16,  16,  17,  18,  18,  18,  18,  18,  19,  20,  20,  20,  20,  20,  21,  22,  22,  22,  22,  22,
    23,  24,  24,  24,  24,  24,  25,  26,  26,  26,  26,  26,  27,  28,  28,  28,  28,  28,  29,  30,  30,  30,  30,
    30,  31,  32,  32,  32,  32,  32,  33,  34,  34,  34,  34,  34,  35,  36,  36,  36,  36,  36,  37,  38,  38,  38,
    38,  38,  39,  40,  40,  40,  40,  40,  41,  42,  42,  42,  42,  42,  43,  44,  44,  44,  44,  44,  45,  46,  46,
    46,  46,  46,  47,  48,  48,  48,  48,  48,  49,  50,  50,  50,  50,  50,  51,  52,  52,  52,  52,  52,  53,  54,
    54,  54,  54,  54,  55,  56,  56,  56,  56,  56,  57,  58,  58,  58,  58,  58,  59,  60,  60,  60,  60,  60,  61,
    62,  62,  62,  62,  62,  63,  64,  64,  64,  64,  64,  65,  66,  66,  66,  66,  66,  67,  68,  68,  68,  68,  68,
    69,  70,  70,  70,  70,  70,  71,  72,  72,  72,  72,  72,  73,  74,  74,  74,  74,  74,  75,  76,  76,  76,  76,
    76,  77,  78,  78,  78,  78,  78,  79,  80,  80,  80,  80,  80,  81,  82,  82,  82,  82,  82,  83,  84,  84,  84,
    84,  84,  85,  86,  86,  86,  86,  86,  87,  88,  88,  88,  88,  88,  89,  90,  90,  90,  90,  90,  91,  92,  92,
    92,  92,  92,  93,  94,  94,  94,  94,  94,  95,  96,  96,  96,  96,  96,  97,  98,  98,  98,  98,  98,  99,  100,
    100, 100, 100, 100, 101, 102, 102, 102, 102, 102, 103, 104, 104, 104, 104, 104, 105, 106, 106, 106, 106, 106, 107,
    108, 108, 108, 108, 108, 109, 110, 110, 110, 110, 110, 111, 112, 112, 112, 112, 112, 113, 114, 114, 114, 114, 114,
    115, 116, 116, 116, 116, 116, 117, 118, 118, 118, 118, 118, 119, 120, 120, 120};
PDAL_int_t Ci[] = {0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8,  9,  9,  10, 10, 11, 11,
                   12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23,
                   24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35,
                   36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47,
                   48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59};
// clang-format off
PDAL_float_t Cx[] = {-0.998629534754574,0.0523359562429438,-0.994521895368273,0.104528463267653,-0.987688340595138,
    0.156434465040231,-0.978147600733806,0.207911690817759,-0.965925826289068,0.258819045102521,-0.951056516295154,
    0.309016994374947,-0.933580426497202,0.3583679495453,-0.913545457642601,0.4067366430758,-0.891006524188368,0.453990499739547,
    -0.866025403784439,0.5,-0.838670567945424,0.544639035015027,-0.809016994374947,0.587785252292473,-0.777145961456971,
    0.629320391049838,-0.743144825477394,0.669130606358858,-0.707106781186548,0.707106781186547,-0.669130606358858,
    0.743144825477394,-0.629320391049838,0.777145961456971,-0.587785252292473,0.809016994374947,-0.544639035015027,
    0.838670567945424,-0.5,0.866025403784439,-0.453990499739547,0.891006524188368,-0.4067366430758,0.913545457642601,
    -0.3583679495453,0.933580426497202,-0.309016994374947,0.951056516295154,-0.258819045102521,0.965925826289068,
    -0.207911690817759,0.978147600733806,-0.156434465040231,0.987688340595138,-0.104528463267653,0.994521895368273,
    -0.052335956242944,0.998629534754574,-6.12323399573677e-17,1,0.0523359562429438,0.998629534754574,0.104528463267653,
    0.994521895368273,0.156434465040231,0.987688340595138,0.207911690817759,0.978147600733806,0.258819045102521,0.965925826289068,
    0.309016994374947,0.951056516295154,0.3583679495453,0.933580426497202,0.4067366430758,0.913545457642601,0.453990499739547,
    0.891006524188368,0.5,0.866025403784439,0.544639035015027,0.838670567945424,0.587785252292473,0.809016994374947,
    0.629320391049837,0.777145961456971,0.669130606358858,0.743144825477394,0.707106781186547,0.707106781186548,0.743144825477394,
    0.669130606358858,0.777145961456971,0.629320391049837,0.809016994374947,0.587785252292473,0.838670567945424,0.544639035015027,
    0.866025403784439,0.5,0.891006524188368,0.453990499739547,0.913545457642601,0.4067366430758,0.933580426497202,0.358367949545301,
    0.951056516295154,0.309016994374948,0.965925826289068,0.258819045102521,0.978147600733806,0.207911690817759,0.987688340595138,
    0.156434465040231,0.994521895368273,0.104528463267654,0.998629534754574,0.0523359562429443,1,1.22464679914735e-16};
// clang-format on

LQProblem getLQProblem() {
  LQProblem problem;
  Eigen::Map<const sparseMatrix_t> H(Hn, Hn, Hp[Hn], Hp, Hi, Hx);
  Eigen::Map<const sparseMatrix_t> G(Grows, Gcols, Gp[Gcols], Gp, Gi, Gx);
  Eigen::Map<const sparseMatrix_t> C(Crows, Ccols, Cp[Ccols], Cp, Ci, Cx);

  problem.H = H.selfadjointView<Eigen::Upper>();
  problem.G = G;
  problem.C = C;
  problem.h.resize(Hn);
  problem.h << 0, 0, 7.25, -2.45833333333333, 0, 0, 0, 0, 7, -2.41666666666667, 0, 0, 0, 0, 6.75, -2.375, 0, 0, 0, 0,
      6.5, -2.33333333333333, 0, 0, 0, 0, 6.25, -2.29166666666667, 0, 0, 0, 0, 6, -2.25, 0, 0, 0, 0, 5.75,
      -2.20833333333333, 0, 0, 0, 0, 5.5, -2.16666666666667, 0, 0, 0, 0, 5.25, -2.125, 0, 0, 0, 0, 5, -2.08333333333333,
      0, 0, 0, 0, 4.75, -2.04166666666667, 0, 0, 0, 0, 4.5, -2, 0, 0, 0, 0, 4.25, -1.95833333333333, 0, 0, 0, 0, 4,
      -1.91666666666667, 0, 0, 0, 0, 3.75, -1.875, 0, 0, 0, 0, 3.5, -1.83333333333333, 0, 0, 0, 0, 3.25,
      -1.79166666666667, 0, 0, 0, 0, 3, -1.75, 0, 0, 0, 0, 2.75, -1.70833333333333, 0, 0, 0, 0, 2.5, -1.66666666666667,
      0, 0, 0, 0, 2.25, -1.625, 0, 0, 0, 0, 2, -1.58333333333333, 0, 0, 0, 0, 1.75, -1.54166666666667, 0, 0, 0, 0, 1.5,
      -1.5, 0, 0, 0, 0, 1.25, -1.45833333333333, 0, 0, 0, 0, 1, -1.41666666666667, 0, 0, 0, 0, 0.75, -1.375, 0, 0, 0, 0,
      0.5, -1.33333333333333, 0, 0, 0, 0, 0.25, -1.29166666666667, 0, 0, 0, 0, -0, -1.25, -0, -0, 0, 0,
      -0.250000000000001, -1.20833333333333, -0, -0, 0, 0, -0.5, -1.16666666666667, -0, -0, 0, 0, -0.750000000000001,
      -1.125, -0, -0, 0, 0, -1, -1.08333333333333, -0, -0, 0, 0, -1.25, -1.04166666666667, -0, -0, 0, 0, -1.5, -1, -0,
      -0, 0, 0, -1.75, -0.958333333333333, -0, -0, 0, 0, -2, -0.916666666666667, -0, -0, 0, 0, -2.25, -0.875, -0, -0, 0,
      0, -2.5, -0.833333333333333, -0, -0, 0, 0, -2.75, -0.791666666666667, -0, -0, 0, 0, -3, -0.75, -0, -0, 0, 0,
      -3.25, -0.708333333333333, -0, -0, 0, 0, -3.5, -0.666666666666667, -0, -0, 0, 0, -3.75, -0.625, -0, -0, 0, 0, -4,
      -0.583333333333333, -0, -0, 0, 0, -4.25, -0.541666666666667, -0, -0, 0, 0, -4.5, -0.5, -0, -0, 0, 0, -4.75,
      -0.458333333333333, -0, -0, 0, 0, -5, -0.416666666666667, -0, -0, 0, 0, -5.25, -0.375, -0, -0, 0, 0, -5.5,
      -0.333333333333333, -0, -0, 0, 0, -5.75, -0.291666666666667, -0, -0, 0, 0, -6, -0.25, -0, -0, 0, 0, -6.25,
      -0.208333333333333, -0, -0, 0, 0, -6.5, -0.166666666666667, -0, -0, 0, 0, -6.75, -0.125, -0, -0, 0, 0, -7,
      -0.0833333333333333, -0, -0, 0, 0, -7.25, -0.0416666666666668, -0, -0, 0, 0, -482.211421251362, -0, -0, -0;

  problem.g.resize(Grows);
  problem.g << -1.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;

  problem.c.resize(Crows);
  problem.c << 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;

  return problem;
}
